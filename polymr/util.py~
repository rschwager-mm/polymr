KMER_SIZE=3
STEP_SIZE=1


def get(keys, idxable):
    return [idxable[k] for k in keys]


def avg(l):
    return sum(l)/len(l)


def ngrams(s, k=KMER_SIZE, step=STEP_SIZE):
    if len(s) < k:
        return [s]
    return [s[i:i+k] for i in range(0, len(s)-k+1, step)]


def jaccard(a, b):
    if not a and not b:
        return 0
    n = len(a.intersection(b))
    return 1 - ( float(n) / (len(a) + len(b) - n) )

